#!/usr/bin/python
# -*- coding: UTF-8 -*-

# 以下内容为python语法
def remove_src(str, list):
  for src in list[::-1]:
    if str in src:
      list.remove(src)

# 指定编译的源码
src_list = []
src_list += tmake_glob(tmake_path('./include/'), '*.h', True)
src_list += tmake_glob(tmake_path('./src/'), '*.h', True)
src_list += tmake_glob(tmake_path('./src/'), '*.c', True)
src_list += tmake_glob(tmake_path('./src/'), '*.cpp', True)
src_list += tmake_glob(tmake_path('./src/'), '*.hpp', True)
src_list += tmake_glob(tmake_path('./src/'), '*.cc', True)
src_list += tmake_glob(tmake_path('./src/'), '*.m', True)
src_list += tmake_glob(tmake_path('./src/'), '*.mm', True)

h_dirs = []
h_dirs.append(tmake_path('./include'))
h_dirs.append(tmake_path('./src'))
h_dirs.append(tmake_path('./src/app'))
h_dirs.append(tmake_path('./src/glfw'))
h_dirs.append(tmake_path('./src/nanovg'))
h_dirs.append(tmake_path('./src/nlohmann'))
h_dirs.append(tmake_path('./src/engine'))
h_dirs.append(tmake_path('./src/timeline'))

flags = ' -std=c++11 '
defs = []

if TMAKE_TARGET == "mac":
  defs.append('_GLFW_COCOA')
  flags += ' -framework Cocoa '
  flags += ' -framework IOKit '
  flags += ' -framework CoreFoundation '
  flags += ' -framework OpenGL '
  remove_src("win32_", src_list)
  remove_src("wgl_context", src_list)

if TMAKE_TARGET == "windows":
  defs.append('_GLFW_WIN32')
  flags += ' -lgdi32 '
  remove_src("cocoa_", src_list)
  remove_src("posix_", src_list)
  remove_src("nsgl_context", src_list)

defs.append('ROOT_PATH="' + os.getcwd().replace('\\', "/") + '"')

print src_list

# 指定编译二进制
tmake_cxx_binary(
  name = 'box',
  srcs = src_list,
  include_dirs = h_dirs,
  linker_flags = flags,
  defines = defs,
  deps = [],
  windows_deps = [
    'gdi32.lib',
    'Opengl32',
  ],
)


