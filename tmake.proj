#!/usr/bin/env python
# -*- coding: UTF-8 -*-

# 以下内容为python语法
def remove_src(str, list):
  for src in list[::-1]:
    if str in src:
      list.remove(src)

folders = ['app', 'widgets', 'scenes', 'os', 'audio', 'glfw', 'nanovg']
folders.append('timeline')
folders.append('quickjs')
folders.append('box2d-lite')
folders.append('engine')
folders.append('gobang')
folders.append('test')
folders.append('layout')
folders.append('particle')

folders.append('platform/' + TMAKE_TARGET)

# 指定编译的源码
h_dirs = []
h_dirs.append(tmake_path('./src'))

src_list = []
src_list.append('./src/main.cpp')

for folder in folders:
  src_list += tmake_glob(tmake_path('./src/' + folder), '*.h', True)
  src_list += tmake_glob(tmake_path('./src/' + folder), '*.c', True)
  src_list += tmake_glob(tmake_path('./src/' + folder), '*.cpp', True)
  src_list += tmake_glob(tmake_path('./src/' + folder), '*.hpp', True)
  src_list += tmake_glob(tmake_path('./src/' + folder), '*.cc', True)
  src_list += tmake_glob(tmake_path('./src/' + folder), '*.m', True)
  src_list += tmake_glob(tmake_path('./src/' + folder), '*.mm', True)

  h_dirs.append(tmake_path('./src/' + folder))

flags = ''
cxx_flags = ' -std=c++11 '
defs = []

if TMAKE_TARGET == "mac":
  defs.append('_GLFW_COCOA')
  flags += ' -framework Cocoa '
  flags += ' -framework IOKit '
  flags += ' -framework CoreFoundation '
  flags += ' -framework OpenGL '
  flags += ' -framework CoreAudio '
  flags += ' -framework AudioToolbox '
  remove_src("win32_", src_list)
  remove_src("wgl_context", src_list)

if TMAKE_TARGET == "windows":
  defs.append('_GLFW_WIN32')
  flags += ' -lgdi32 '
  remove_src("cocoa_", src_list)
  remove_src("posix_", src_list)
  remove_src("nsgl_context", src_list)

defs.append('ROOT_PATH="' + os.getcwd().replace('\\', "/") + '"')

print src_list

# 指定编译二进制
tmake_cxx_binary(
  name = 'box',
  srcs = src_list,
  include_dirs = h_dirs,
  linker_flags = flags,
  cxx_flags = cxx_flags,
  defines = defs,
  deps = [],
  windows_deps = [
    'gdi32.lib',
    'Opengl32',
  ],
)


